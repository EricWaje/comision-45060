- Javascrip -
const foo = () => {}

foo()

- React -

const Foo = () =>{
    return()
}



1. Todos los componentes son funciones.
2. Todos los componentes se escribien con la inicial en mayúsucla.
3. Todos los componentes deben retornar algo.
4. Todos los componentes deben retornar 1 (UN) solo elemento.
5. Los componentes retornan JSX.
6. Todos los componentes pueden recibir props ({}) o enviar props a otros componentes.

JSX -> Javascrip + XML

Como leeria el navegador mi código:

JSX -> <div id='contenedor'>Bienvenidos</div>
Como lo lee el navegador -> react.createElement( "div", { id: "contenedor"}, 'Bienvenidos')

<></> --> React Fragments

rafce -> Atajo para crear plantilla de componente
react arrow function component export

-> export default importo sin llaves (import Header from './components/Header)
-> export nombrado importo con llaves (import {Header} from './components/Header)

* Solo puedo tener 1 export default por archivo


-- PROPS --
// const foo = (a,b) =>{
// return a+ b
// }

// foo(20,5)


//const Foo = (props) =>{}

const saludar = () => console.log('Bienvenidos')

//<Foo key={value} />

<Foo nombre='Eric' edad={27} otraCosa={} />

<Foo persona={{id: 1, nombre: "Fabian"}} />
<Foo listaDelSuper={["Manzana", "Banana"]} />
<Foo listaDelSuper={[{},{},{}]} />
<Foo listaDelSuper={saludar} />

- array
- objetos
- funciones
- booleanos
- numbers
- strings (Es el único que puede enviarse sin llaves {})
- componentes

concatenar strings + variables
`string ${variable}`


Icons
-React icons (https://react-icons.github.io/react-icons/)
- Iconos de Google (https://fonts.google.com/?selected=Material+Icons:home)

IMG
- Link desde la web :
 <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSG7wRVI8zms8XPalGIXwHH5QUGfWvGO9OOXg&usqp=CAU" alt=""/>

- Img desde public: -> Siempre poner la ruta como si ya estuvieramos parados en public
<img src="logo192.png" alt="" />

- Desde src --> Primero importo la img, le doy un nombre y luego la utilizo entre {} dentro de img
import logo from '../../img/logo192.png';
<img src={logo} alt="" />


Eventos
- Se escrbien con camelCase (TODOS!) y se escriben en la propia etiqueta html.

CADA VEZ QUE HAYA UN CAMBIO DE ESATDO, VAMBIO DE PROP O UN EVENTO QUE DISPARE UN CAMBIO DE ESTADO O UN CAMBIO DE PROP, SE VOLVERA A RENDERIZAR EL COMPONENTE

ESTADOS:
Hook --> useState()  ->  const [1,2] = useState()

- La primera posicion es mi estado y la segunda la función seteadora
- Dentro de los paréntesis puedo poner un valor inicial para que mi estado no arranque en undefined

const [state, setState] = useState(0) -> 0 es mi valor inicial.

La única manera que tengo de modificar mi estado es a través de la función seteadora.
setState( state + 10)

React solo modifica el DOM cuando escucha que se emite una función seteadora.

